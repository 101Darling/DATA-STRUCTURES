# Author: Darling Ngoh
# Concept Utility: Data Structures


#prolog
'''
In user content generated web-services - lets say YouTube - the process of de-
duplication is of serious importance. One straight forward reason is same video...
by different names is just an extra cost in data-storage. So getting rid of exact
duplicate content makes financial sense. Please be reminded that exact same
content with different video qualities may not be candidates for removal via
de-duplication.

  We will explore on ways to do a de-duplication of videos where video filenames
are presented as integers. For the purposes of our task, we will set a very narrow
criterion for de-duplication : just the filenames.

Below is how the filenames are represented
ARRAY[] = [50, 11, 33, 21, 40, 50, 40, 40, 21]

Below is the expected output after de-duplication
ARRAY[] = [11, 21, 33, 40, 50]

Test Cases considerations:
  1) [Edge cases:] empty array, null input, 'x' value out of bound
  2) [Base cases:] single element array(less,greater,equal to), Two elements
  3) [Regular cases:] single element in pivot, multiple pivots(given case)
'''


# initialize filenames as int array
ARRAY = [50, 11, 33, 21, 40, 50, 40, 40, 21]

# def function for dictionary sort algorithm
def deduplicate_filenames(filenames):
  """
  De-duplicates video filenames with a dictionary, keeping track of appearances,
  with sorted output without using sorted().
  Args:
    filenames: A list of video filenames (integers).
  Returns:
    A list of unique filenames sorted in ascending order
  """

  # Create an empty dictionary to store unique filenames and their counts
  unique_filenames = {}

  # Process each filename, counting occurrences and updating dictionary
  for filename in filenames:
    if filename not in unique_filenames:
      unique_filenames[filename] = 1  # New filename, add with count 1
    else:
      unique_filenames[filename] += 1  # Existing filename, increase count

  # Extract unique filenames from the dictionary (not yet sorted)
  unique_filenames_list = list(unique_filenames.keys())

  # Sort the list of unique filenames in ascending order using a loop
  # avoid using sorted() function
  sorted_filenames = []
  while unique_filenames_list:
    # Find the minimum value (filename) remaining
    min_value = min(unique_filenames_list)

    # Append the minimum value to the sorted list
    sorted_filenames.append(min_value)

    # Remove the minimum value from the original list
    unique_filenames_list.remove(min_value)

  return sorted_filenames

# driver function to manage test case considerations
def output(arr):
  if len(arr) == 1:
    return(arr)
  elif len(arr) < 1:
    return('Empty! Value(s) must be added in array for unique sorting')
  else:
    return deduplicate_filenames(arr)

output(ARRAY)
